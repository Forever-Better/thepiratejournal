{"version":3,"file":"static/js/474.059ad4ad.chunk.js","mappings":"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","sources":["../node_modules/react-spinners/esm/helpers/unitConverter.js","../node_modules/react-spinners/esm/helpers/animation.js","../node_modules/react-spinners/esm/CircleLoader.js","../node_modules/react-hook-form/src/utils/isCheckBoxInput.ts","../node_modules/react-hook-form/src/utils/isDateObject.ts","../node_modules/react-hook-form/src/utils/isNullOrUndefined.ts","../node_modules/react-hook-form/src/utils/isObject.ts","../node_modules/react-hook-form/src/logic/getEventValue.ts","../node_modules/react-hook-form/src/logic/isNameInFieldArray.ts","../node_modules/react-hook-form/src/logic/getNodeParentName.ts","../node_modules/react-hook-form/src/utils/compact.ts","../node_modules/react-hook-form/src/utils/isUndefined.ts","../node_modules/react-hook-form/src/utils/get.ts","../node_modules/react-hook-form/src/constants.ts","../node_modules/react-hook-form/src/logic/getProxyFormState.ts","../node_modules/react-hook-form/src/useFormContext.tsx","../node_modules/react-hook-form/src/utils/isEmptyObject.ts","../node_modules/react-hook-form/src/logic/shouldRenderFormState.ts","../node_modules/react-hook-form/src/utils/convertToArrayPayload.ts","../node_modules/react-hook-form/src/useSubscribe.ts","../node_modules/react-hook-form/src/utils/isString.ts","../node_modules/react-hook-form/src/logic/generateWatchOutput.ts","../node_modules/react-hook-form/src/utils/isFunction.ts","../node_modules/react-hook-form/src/utils/objectHasFunction.ts","../node_modules/react-hook-form/src/controller.tsx","../node_modules/react-hook-form/src/logic/appendErrors.ts","../node_modules/react-hook-form/src/utils/isKey.ts","../node_modules/react-hook-form/src/utils/stringToPath.ts","../node_modules/react-hook-form/src/utils/set.ts","../node_modules/react-hook-form/src/logic/focusFieldBy.ts","../node_modules/react-hook-form/src/logic/isWatched.ts","../node_modules/react-hook-form/src/logic/updateFieldArrayRootError.ts","../node_modules/react-hook-form/src/utils/isBoolean.ts","../node_modules/react-hook-form/src/utils/isFileInput.ts","../node_modules/react-hook-form/src/utils/isMessage.ts","../node_modules/react-hook-form/src/utils/isRadioInput.ts","../node_modules/react-hook-form/src/utils/isRegex.ts","../node_modules/react-hook-form/src/logic/getCheckboxValue.ts","../node_modules/react-hook-form/src/logic/getRadioValue.ts","../node_modules/react-hook-form/src/logic/getValidateError.ts","../node_modules/react-hook-form/src/logic/getValueAndMessage.ts","../node_modules/react-hook-form/src/logic/validateField.ts","../node_modules/react-hook-form/src/utils/isPlainObject.ts","../node_modules/react-hook-form/src/utils/isWeb.ts","../node_modules/react-hook-form/src/utils/cloneObject.ts","../node_modules/react-hook-form/src/utils/fillEmptyArray.ts","../node_modules/react-hook-form/src/utils/getValidationModes.ts","../node_modules/react-hook-form/src/utils/unset.ts","../node_modules/react-hook-form/src/utils/createSubject.ts","../node_modules/react-hook-form/src/utils/isPrimitive.ts","../node_modules/react-hook-form/src/utils/deepEqual.ts","../node_modules/react-hook-form/src/utils/isHTMLElement.ts","../node_modules/react-hook-form/src/utils/isMultipleSelect.ts","../node_modules/react-hook-form/src/utils/isRadioOrCheckbox.ts","../node_modules/react-hook-form/src/utils/live.ts","../node_modules/react-hook-form/src/logic/getDirtyFields.ts","../node_modules/react-hook-form/src/logic/getFieldValueAs.ts","../node_modules/react-hook-form/src/logic/getFieldValue.ts","../node_modules/react-hook-form/src/logic/getResolverOptions.ts","../node_modules/react-hook-form/src/logic/getRuleValue.ts","../node_modules/react-hook-form/src/logic/hasValidation.ts","../node_modules/react-hook-form/src/logic/schemaErrorLookup.ts","../node_modules/react-hook-form/src/logic/skipValidation.ts","../node_modules/react-hook-form/src/logic/unsetEmptyArray.ts","../node_modules/react-hook-form/src/logic/createFormControl.ts","../node_modules/react-hook-form/src/useForm.ts"],"sourcesContent":["var cssUnit = {\n    cm: true,\n    mm: true,\n    in: true,\n    px: true,\n    pt: true,\n    pc: true,\n    em: true,\n    ex: true,\n    ch: true,\n    rem: true,\n    vw: true,\n    vh: true,\n    vmin: true,\n    vmax: true,\n    \"%\": true,\n};\n/**\n * If size is a number, append px to the value as default unit.\n * If size is a string, validate against list of valid units.\n * If unit is valid, return size as is.\n * If unit is invalid, console warn issue, replace with px as the unit.\n *\n * @param {(number | string)} size\n * @return {LengthObject} LengthObject\n */\nexport function parseLengthAndUnit(size) {\n    if (typeof size === \"number\") {\n        return {\n            value: size,\n            unit: \"px\",\n        };\n    }\n    var value;\n    var valueString = (size.match(/^[0-9.]*/) || \"\").toString();\n    if (valueString.includes(\".\")) {\n        value = parseFloat(valueString);\n    }\n    else {\n        value = parseInt(valueString, 10);\n    }\n    var unit = (size.match(/[^0-9]*$/) || \"\").toString();\n    if (cssUnit[unit]) {\n        return {\n            value: value,\n            unit: unit,\n        };\n    }\n    console.warn(\"React Spinners: \".concat(size, \" is not a valid css value. Defaulting to \").concat(value, \"px.\"));\n    return {\n        value: value,\n        unit: \"px\",\n    };\n}\n/**\n * Take value as an input and return valid css value\n *\n * @param {(number | string)} value\n * @return {string} valid css value\n */\nexport function cssValue(value) {\n    var lengthWithunit = parseLengthAndUnit(value);\n    return \"\".concat(lengthWithunit.value).concat(lengthWithunit.unit);\n}\n","export var createAnimation = function (loaderName, frames, suffix) {\n    var animationName = \"react-spinners-\".concat(loaderName, \"-\").concat(suffix);\n    if (typeof window == \"undefined\" || !window.document) {\n        return animationName;\n    }\n    var styleEl = document.createElement(\"style\");\n    document.head.appendChild(styleEl);\n    var styleSheet = styleEl.sheet;\n    var keyFrames = \"\\n    @keyframes \".concat(animationName, \" {\\n      \").concat(frames, \"\\n    }\\n  \");\n    if (styleSheet) {\n        styleSheet.insertRule(keyFrames, 0);\n    }\n    return animationName;\n};\n","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from \"react\";\nimport { cssValue, parseLengthAndUnit } from \"./helpers/unitConverter\";\nimport { createAnimation } from \"./helpers/animation\";\nvar circle = createAnimation(\"CircleLoader\", \"0% {transform: rotate(0deg)} 50% {transform: rotate(180deg)} 100% {transform: rotate(360deg)}\", \"circle\");\nfunction CircleLoader(_a) {\n    var _b = _a.loading, loading = _b === void 0 ? true : _b, _c = _a.color, color = _c === void 0 ? \"#000000\" : _c, _d = _a.speedMultiplier, speedMultiplier = _d === void 0 ? 1 : _d, _e = _a.cssOverride, cssOverride = _e === void 0 ? {} : _e, _f = _a.size, size = _f === void 0 ? 50 : _f, additionalprops = __rest(_a, [\"loading\", \"color\", \"speedMultiplier\", \"cssOverride\", \"size\"]);\n    var wrapper = __assign({ display: \"inherit\", position: \"relative\", width: cssValue(size), height: cssValue(size) }, cssOverride);\n    var style = function (i) {\n        var _a = parseLengthAndUnit(size), value = _a.value, unit = _a.unit;\n        return {\n            position: \"absolute\",\n            height: \"\".concat(value * (1 - i / 10)).concat(unit),\n            width: \"\".concat(value * (1 - i / 10)).concat(unit),\n            borderTop: \"1px solid \".concat(color),\n            borderBottom: \"none\",\n            borderLeft: \"1px solid \".concat(color),\n            borderRight: \"none\",\n            borderRadius: \"100%\",\n            transition: \"2s\",\n            top: \"\".concat(i * 0.7 * 2.5, \"%\"),\n            left: \"\".concat(i * 0.35 * 2.5, \"%\"),\n            animationFillMode: \"\",\n            animation: \"\".concat(circle, \" \").concat(1 / speedMultiplier, \"s \").concat((i * 0.2) / speedMultiplier, \"s infinite linear\"),\n        };\n    };\n    if (!loading) {\n        return null;\n    }\n    return (React.createElement(\"span\", __assign({ style: wrapper }, additionalprops),\n        React.createElement(\"span\", { style: style(0) }),\n        React.createElement(\"span\", { style: style(1) }),\n        React.createElement(\"span\", { style: style(2) }),\n        React.createElement(\"span\", { style: style(3) }),\n        React.createElement(\"span\", { style: style(4) })));\n}\nexport default CircleLoader;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (value: unknown): value is Date => value instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  names.has(getNodeParentName(name));\n","export default (name: string) =>\n  name.substring(0, name.search(/\\.\\d+(\\.|$)/)) || name;\n","export default <TValue>(value: TValue[]) =>\n  Array.isArray(value) ? value.filter(Boolean) : [];\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T>(obj: T, path: string, defaultValue?: unknown): any => {\n  if (!path || !isObject(obj)) {\n    return defaultValue;\n  }\n\n  const result = compact(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) =>\n      isNullOrUndefined(result) ? result : result[key as keyof {}],\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path as keyof T])\n      ? defaultValue\n      : obj[path as keyof T]\n    : result;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  FOCUS_OUT: 'focusout',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","import { VALIDATION_MODE } from '../constants';\nimport { Control, FieldValues, FormState, ReadFormState } from '../types';\n\nexport default <TFieldValues extends FieldValues>(\n  formState: FormState<TFieldValues>,\n  control: Control<TFieldValues>,\n  localProxyFormState?: ReadFormState,\n  isRoot = true,\n) => {\n  const result = {\n    defaultValues: control._defaultValues,\n  } as typeof formState;\n\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: () => {\n        const _key = key as keyof FormState<TFieldValues> & keyof ReadFormState;\n\n        if (control._proxyFormState[_key] !== VALIDATION_MODE.all) {\n          control._proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\n        }\n\n        localProxyFormState && (localProxyFormState[_key] = true);\n        return formState[_key];\n      },\n    });\n  }\n\n  return result;\n};\n","import React from 'react';\n\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst HookFormContext = React.createContext<UseFormReturn | null>(null);\n\n/**\n * This custom hook allows you to access the form context. useFormContext is intended to be used in deeply nested structures, where it would become inconvenient to pass the context as a prop. To be used with {@link FormProvider}.\n *\n * @remarks\n * [API](https://react-hook-form.com/api/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @returns return all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(HookFormContext) as unknown as UseFormReturn<TFieldValues>;\n\n/**\n * A provider component that propagates the `useForm` methods to all children components via [React Context](https://reactjs.org/docs/context.html) API. To be used with {@link useFormContext}.\n *\n * @remarks\n * [API](https://react-hook-form.com/api/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @param props - all useFrom methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nexport const FormProvider = <TFieldValues extends FieldValues, TContext = any>(\n  props: FormProviderProps<TFieldValues, TContext>,\n) => {\n  const { children, ...data } = props;\n  return (\n    <HookFormContext.Provider value={data as unknown as UseFormReturn}>\n      {children}\n    </HookFormContext.Provider>\n  );\n};\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  _proxyFormState: K,\n  isRoot?: boolean,\n) => {\n  const { name, ...formState } = formStateData;\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n    Object.keys(formState).find(\n      (key) =>\n        _proxyFormState[key as keyof ReadFormState] ===\n        (!isRoot || VALIDATION_MODE.all),\n    )\n  );\n};\n","export default <T>(value: T) => (Array.isArray(value) ? value : [value]);\n","import React from 'react';\n\nimport { Subject } from './utils/createSubject';\n\ntype Props<T> = {\n  disabled?: boolean;\n  subject: Subject<T>;\n  callback: (value: T) => void;\n};\n\nexport function useSubscribe<T>(props: Props<T>) {\n  const _props = React.useRef(props);\n  _props.current = props;\n\n  React.useEffect(() => {\n    const subscription =\n      !props.disabled &&\n      _props.current.subject.subscribe({\n        next: _props.current.callback,\n      });\n\n    return () => {\n      subscription && subscription.unsubscribe();\n    };\n  }, [props.disabled]);\n}\n","export default (value: unknown): value is string => typeof value === 'string';\n","import { FieldValues, InternalFieldName, Names } from '../types';\nimport get from '../utils/get';\nimport isString from '../utils/isString';\n\nexport default (\n  names: string | string[] | undefined,\n  _names: Names,\n  formValues?: FieldValues,\n  isGlobal?: boolean,\n) => {\n  const isArray = Array.isArray(names);\n  if (isString(names)) {\n    isGlobal && _names.watch.add(names as InternalFieldName);\n    return get(formValues, names as InternalFieldName);\n  }\n\n  if (isArray) {\n    return names.map(\n      (fieldName) => (\n        isGlobal && _names.watch.add(fieldName as InternalFieldName),\n        get(formValues, fieldName as InternalFieldName)\n      ),\n    );\n  }\n\n  isGlobal && (_names.watchAll = true);\n  return formValues;\n};\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import isFunction from './isFunction';\n\nexport default <T>(data: T): boolean => {\n  for (const key in data) {\n    if (isFunction(data[key])) {\n      return true;\n    }\n  }\n  return false;\n};\n","import { ControllerProps, FieldPath, FieldValues } from './types';\nimport { useController } from './useController';\n\n/**\n * Component based on `useController` hook to work with controlled component.\n *\n * @remarks\n * [API](https://react-hook-form.com/api/usecontroller/controller) • [Demo](https://codesandbox.io/s/react-hook-form-v6-controller-ts-jwyzw) • [Video](https://www.youtube.com/watch?v=N2UNk_UCVyA)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns provide field handler functions, field and form state.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control } = useForm<FormValues>({\n *     defaultValues: {\n *       test: \"\"\n *     }\n *   });\n *\n *   return (\n *     <form>\n *       <Controller\n *         control={control}\n *         name=\"test\"\n *         render={({ field: { onChange, onBlur, value, ref }, formState, fieldState }) => (\n *           <>\n *             <input\n *               onChange={onChange} // send value to hook form\n *               onBlur={onBlur} // notify when input is touched\n *               value={value} // return updated value\n *               ref={ref} // set ref for focus management\n *             />\n *             <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *             <p>{fieldState.isTouched ? \"touched\" : \"\"}</p>\n *           </>\n *         )}\n *       />\n *     </form>\n *   );\n * }\n * ```\n */\nconst Controller = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: ControllerProps<TFieldValues, TName>,\n) => props.render(useController<TFieldValues, TName>(props));\n\nexport { Controller };\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name?: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const { _f, ...currentField } = field;\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus) {\n          _f.ref.focus();\n          break;\n        } else if (_f.refs && _f.refs[0].focus) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(currentField)) {\n        focusFieldBy(currentField, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import { InternalFieldName, Names } from '../types';\n\nexport default (\n  name: InternalFieldName,\n  _names: Names,\n  isBlurEvent?: boolean,\n) =>\n  !isBlurEvent &&\n  (_names.watchAll ||\n    _names.watch.has(name) ||\n    [..._names.watch].some(\n      (watchName) =>\n        name.startsWith(watchName) &&\n        /^\\.\\w+/.test(name.slice(watchName.length)),\n    ));\n","import {\n  FieldError,\n  FieldErrors,\n  FieldValues,\n  InternalFieldName,\n} from '../types';\nimport compact from '../utils/compact';\nimport get from '../utils/get';\nimport set from '../utils/set';\n\nexport default <T extends FieldValues = FieldValues>(\n  errors: FieldErrors<T>,\n  error: Partial<Record<string, FieldError>>,\n  name: InternalFieldName,\n): FieldErrors<T> => {\n  const fieldArrayErrors = compact(get(errors, name));\n  set(fieldArrayErrors, 'root', error[name]);\n  set(errors, name, fieldArrayErrors);\n  return errors;\n};\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldError,\n  InternalFieldErrors,\n  Message,\n  NativeFieldValue,\n} from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async <T extends NativeFieldValue>(\n  field: Field,\n  inputValue: T,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n  isFieldArray?: boolean,\n): Promise<InternalFieldErrors> => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled,\n  } = field._f;\n  if (!mount || disabled) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidity = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    isFieldArray\n      ? !Array.isArray(inputValue) || !inputValue.length\n      : required &&\n        ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n          (isBoolean(inputValue) && !inputValue) ||\n          (isCheckBox && !getCheckboxValue(refs).isValid) ||\n          (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNullOrUndefined(inputValue) && !isNaN(inputValue as number)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber ||\n        (inputValue ? +inputValue : inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue as string);\n      const convertTimeToDate = (time: unknown) =>\n        new Date(new Date().toDateString() + ' ' + time);\n      const isTime = ref.type == 'time';\n      const isWeek = ref.type == 'week';\n\n      if (isString(maxOutput.value) && inputValue) {\n        exceedMax = isTime\n          ? convertTimeToDate(inputValue) > convertTimeToDate(maxOutput.value)\n          : isWeek\n          ? inputValue > maxOutput.value\n          : valueDate > new Date(maxOutput.value);\n      }\n\n      if (isString(minOutput.value) && inputValue) {\n        exceedMin = isTime\n          ? convertTimeToDate(inputValue) < convertTimeToDate(minOutput.value)\n          : isWeek\n          ? inputValue < minOutput.value\n          : valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (\n    (maxLength || minLength) &&\n    !isEmpty &&\n    (isString(inputValue) || (isFieldArray && Array.isArray(inputValue)))\n  ) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidity(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidity(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidity(true);\n  return error;\n};\n","import isObject from './isObject';\n\nexport default (tempObject: object) => {\n  const prototypeCopy =\n    tempObject.constructor && tempObject.constructor.prototype;\n\n  return (\n    isObject(prototypeCopy) && prototypeCopy.hasOwnProperty('isPrototypeOf')\n  );\n};\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import isObject from './isObject';\nimport isPlainObject from './isPlainObject';\nimport isWeb from './isWeb';\n\nexport default function cloneObject<T>(data: T): T {\n  let copy: any;\n  const isArray = Array.isArray(data);\n\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (\n    !(isWeb && (data instanceof Blob || data instanceof FileList)) &&\n    (isArray || isObject(data))\n  ) {\n    copy = isArray ? [] : {};\n\n    if (!Array.isArray(data) && !isPlainObject(data)) {\n      copy = data;\n    } else {\n      for (const key in data) {\n        copy[key] = cloneObject(data[key]);\n      }\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n","export default <T>(value: T | T[]): undefined[] | undefined =>\n  Array.isArray(value) ? value.map(() => undefined) : undefined;\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","import isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nfunction isEmptyArray(obj: unknown[]) {\n  for (const key in obj) {\n    if (!isUndefined(obj[key])) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) && isEmptyArray(objectRef)))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import { Noop } from '../types';\n\nexport type Observer<T> = {\n  next: (value: T) => void;\n};\n\nexport type Subscription = {\n  unsubscribe: Noop;\n};\n\nexport type Subject<T> = {\n  readonly observers: Observer<T>[];\n  subscribe: (value: Observer<T>) => Subscription;\n  unsubscribe: Noop;\n} & Observer<T>;\n\nexport default function createSubject<T>(): Subject<T> {\n  let _observers: Observer<T>[] = [];\n\n  const next = (value: T) => {\n    for (const observer of _observers) {\n      observer.next(value);\n    }\n  };\n\n  const subscribe = (observer: Observer<T>): Subscription => {\n    _observers.push(observer);\n    return {\n      unsubscribe: () => {\n        _observers = _observers.filter((o) => o !== observer);\n      },\n    };\n  };\n\n  const unsubscribe = () => {\n    _observers = [];\n  };\n\n  return {\n    get observers() {\n      return _observers;\n    },\n    next,\n    subscribe,\n    unsubscribe,\n  };\n}\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(object1: any, object2: any) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (\n        (isDateObject(val1) && isDateObject(val2)) ||\n        (isObject(val1) && isObject(val2)) ||\n        (Array.isArray(val1) && Array.isArray(val2))\n          ? !deepEqual(val1, val2)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","export default (value: unknown): value is HTMLElement => {\n  const owner = value ? ((value as HTMLElement).ownerDocument as Document) : 0;\n  const ElementClass =\n    owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement;\n  return value instanceof ElementClass;\n};\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import { Ref } from '../types';\n\nimport isHTMLElement from './isHTMLElement';\n\nexport default (ref: Ref) => isHTMLElement(ref) && ref.isConnected;\n","import deepEqual from '../utils/deepEqual';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\nimport isUndefined from '../utils/isUndefined';\nimport objectHasFunction from '../utils/objectHasFunction';\n\nfunction markFieldsDirty<U>(data: U, fields: Record<string, any> = {}) {\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (\n        Array.isArray(data[key]) ||\n        (isObject(data[key]) && !objectHasFunction(data[key]))\n      ) {\n        fields[key] = Array.isArray(data[key]) ? [] : {};\n        markFieldsDirty(data[key], fields[key]);\n      } else if (!isNullOrUndefined(data[key])) {\n        fields[key] = true;\n      }\n    }\n  }\n\n  return fields;\n}\n\nfunction getDirtyFieldsFromDefaultValues<T>(\n  data: T,\n  formValues: T,\n  dirtyFieldsFromValues: any,\n) {\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (\n        Array.isArray(data[key]) ||\n        (isObject(data[key]) && !objectHasFunction(data[key]))\n      ) {\n        if (\n          isUndefined(formValues) ||\n          isPrimitive(dirtyFieldsFromValues[key])\n        ) {\n          dirtyFieldsFromValues[key] = Array.isArray(data[key])\n            ? markFieldsDirty(data[key], [])\n            : { ...markFieldsDirty(data[key]) };\n        } else {\n          getDirtyFieldsFromDefaultValues(\n            data[key],\n            isNullOrUndefined(formValues) ? {} : formValues[key],\n            dirtyFieldsFromValues[key],\n          );\n        }\n      } else {\n        dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\n      }\n    }\n  }\n\n  return dirtyFieldsFromValues;\n}\n\nexport default <T>(defaultValues: T, formValues: T) =>\n  getDirtyFieldsFromDefaultValues(\n    defaultValues,\n    formValues,\n    markFieldsDirty(formValues),\n  );\n","import { Field, NativeFieldValue } from '../types';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\n\nexport default <T extends NativeFieldValue>(\n  value: T,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : value\n      ? +value\n      : value\n    : valueAsDate && isString(value)\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(_f: Field['_f']) {\n  const ref = _f.ref;\n\n  if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n    return;\n  }\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return [...ref.selectedOptions].map(({ value }) => value);\n  }\n\n  if (isCheckBox(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  FieldValues,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  _fields: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field: Field = get(_fields, name);\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","import {\n  ValidationRule,\n  ValidationValue,\n  ValidationValueMessage,\n} from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport isUndefined from '../utils/isUndefined';\n\nexport default <T extends ValidationValue>(\n  rule?: ValidationRule<T> | ValidationValueMessage<T>,\n) =>\n  isUndefined(rule)\n    ? undefined\n    : isRegex(rule)\n    ? rule.source\n    : isObject(rule)\n    ? isRegex(rule.value)\n      ? rule.value.source\n      : rule.value\n    : rule;\n","import { Field } from '../types';\n\nexport default (options: Field['_f']) =>\n  options.mount &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","import { FieldError, FieldErrors, FieldValues } from '../types';\nimport get from '../utils/get';\nimport isKey from '../utils/isKey';\n\nexport default function schemaErrorLookup<T extends FieldValues = FieldValues>(\n  errors: FieldErrors<T>,\n  _fields: FieldValues,\n  name: string,\n): {\n  error?: FieldError;\n  name: string;\n} {\n  const error = get(errors, name);\n\n  if (error || isKey(name)) {\n    return {\n      error,\n      name,\n    };\n  }\n\n  const names = name.split('.');\n\n  while (names.length) {\n    const fieldName = names.join('.');\n    const field = get(_fields, fieldName);\n    const foundError = get(errors, fieldName);\n\n    if (field && !Array.isArray(field) && name !== fieldName) {\n      return { name };\n    }\n\n    if (foundError && foundError.type) {\n      return {\n        name: fieldName,\n        error: foundError,\n      };\n    }\n\n    names.pop();\n  }\n\n  return {\n    name,\n  };\n}\n","export default (\n  isBlurEvent: boolean,\n  isTouched: boolean,\n  isSubmitted: boolean,\n  reValidateMode: {\n    isOnBlur: boolean;\n    isOnChange: boolean;\n  },\n  mode: Partial<{\n    isOnSubmit: boolean;\n    isOnBlur: boolean;\n    isOnChange: boolean;\n    isOnTouch: boolean;\n    isOnAll: boolean;\n  }>,\n) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import compact from '../utils/compact';\nimport get from '../utils/get';\nimport unset from '../utils/unset';\n\nexport default <T>(ref: T, name: string) =>\n  !compact(get(ref, name)).length && unset(ref, name);\n","import { EVENTS, VALIDATION_MODE } from '../constants';\nimport {\n  BatchFieldArrayUpdate,\n  ChangeHandler,\n  DeepPartial,\n  DelayCallback,\n  EventType,\n  Field,\n  FieldError,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  Ref,\n  ResolverResult,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UseFormClearErrors,\n  UseFormGetFieldState,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormReset,\n  UseFormResetField,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from '../types';\nimport cloneObject from '../utils/cloneObject';\nimport compact from '../utils/compact';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport createSubject from '../utils/createSubject';\nimport deepEqual from '../utils/deepEqual';\nimport get from '../utils/get';\nimport getValidationModes from '../utils/getValidationModes';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDateObject from '../utils/isDateObject';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isPrimitive from '../utils/isPrimitive';\nimport isRadioOrCheckbox from '../utils/isRadioOrCheckbox';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\nimport isWeb from '../utils/isWeb';\nimport live from '../utils/live';\nimport set from '../utils/set';\nimport unset from '../utils/unset';\n\nimport focusFieldBy from './focusFieldBy';\nimport generateWatchOutput from './generateWatchOutput';\nimport getDirtyFields from './getDirtyFields';\nimport getEventValue from './getEventValue';\nimport getFieldValue from './getFieldValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getResolverOptions from './getResolverOptions';\nimport getRuleValue from './getRuleValue';\nimport hasValidation from './hasValidation';\nimport isNameInFieldArray from './isNameInFieldArray';\nimport isWatched from './isWatched';\nimport schemaErrorLookup from './schemaErrorLookup';\nimport skipValidation from './skipValidation';\nimport unsetEmptyArray from './unsetEmptyArray';\nimport updateFieldArrayRootError from './updateFieldArrayRootError';\nimport validateField from './validateField';\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true,\n} as const;\n\nexport function createFormControl<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext = any,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): Omit<UseFormReturn<TFieldValues, TContext>, 'formState'> {\n  let _options = {\n    ...defaultOptions,\n    ...props,\n  };\n  let _formState: FormState<TFieldValues> = {\n    submitCount: 0,\n    isDirty: false,\n    isValidating: false,\n    isSubmitted: false,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    touchedFields: {},\n    dirtyFields: {},\n    errors: {},\n  };\n  let _fields = {};\n  let _defaultValues = cloneObject(_options.defaultValues) || {};\n  let _formValues = _options.shouldUnregister\n    ? {}\n    : cloneObject(_defaultValues);\n  let _stateFlags = {\n    action: false,\n    mount: false,\n    watch: false,\n  };\n  let _names: Names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n  } as Names;\n  let delayErrorCallback: DelayCallback | null;\n  let timer = 0;\n  let validateFields: Record<InternalFieldName, number> = {};\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  };\n  const _subjects: Subjects<TFieldValues> = {\n    watch: createSubject(),\n    array: createSubject(),\n    state: createSubject(),\n  };\n\n  const validationModeBeforeSubmit = getValidationModes(_options.mode);\n  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  const shouldDisplayAllAssociatedErrors =\n    _options.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce =\n    <T extends Function>(callback: T) =>\n    (wait: number) => {\n      clearTimeout(timer);\n      timer = window.setTimeout(callback, wait);\n    };\n\n  const _updateValid = async (shouldSkipRender?: boolean) => {\n    let isValid = false;\n\n    if (_proxyFormState.isValid) {\n      isValid = _options.resolver\n        ? isEmptyObject((await _executeSchema()).errors)\n        : await executeBuiltInValidation(_fields, true);\n\n      if (!shouldSkipRender && isValid !== _formState.isValid) {\n        _formState.isValid = isValid;\n        _subjects.state.next({\n          isValid,\n        });\n      }\n    }\n\n    return isValid;\n  };\n\n  const _updateFieldArray: BatchFieldArrayUpdate = (\n    name,\n    values = [],\n    method,\n    args,\n    shouldSetValues = true,\n    shouldUpdateFieldsAndState = true,\n  ) => {\n    if (args && method) {\n      _stateFlags.action = true;\n      if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {\n        const fieldValues = method(get(_fields, name), args.argA, args.argB);\n        shouldSetValues && set(_fields, name, fieldValues);\n      }\n\n      if (\n        _proxyFormState.errors &&\n        shouldUpdateFieldsAndState &&\n        Array.isArray(get(_formState.errors, name))\n      ) {\n        const errors = method(\n          get(_formState.errors, name),\n          args.argA,\n          args.argB,\n        );\n        shouldSetValues && set(_formState.errors, name, errors);\n        unsetEmptyArray(_formState.errors, name);\n      }\n\n      if (\n        _proxyFormState.touchedFields &&\n        shouldUpdateFieldsAndState &&\n        Array.isArray(get(_formState.touchedFields, name))\n      ) {\n        const touchedFields = method(\n          get(_formState.touchedFields, name),\n          args.argA,\n          args.argB,\n        );\n        shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n      }\n\n      if (_proxyFormState.dirtyFields) {\n        _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n      }\n\n      _subjects.state.next({\n        isDirty: _getDirty(name, values),\n        dirtyFields: _formState.dirtyFields,\n        errors: _formState.errors,\n        isValid: _formState.isValid,\n      });\n    } else {\n      set(_formValues, name, values);\n    }\n  };\n\n  const updateErrors = (name: InternalFieldName, error: FieldError) => {\n    set(_formState.errors, name, error);\n    _subjects.state.next({\n      errors: _formState.errors,\n    });\n  };\n\n  const updateValidAndValue = (\n    name: InternalFieldName,\n    shouldSkipSetValueAs: boolean,\n    value?: unknown,\n    ref?: Ref,\n  ) => {\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      const defaultValue = get(\n        _formValues,\n        name,\n        isUndefined(value) ? get(_defaultValues, name) : value,\n      );\n\n      isUndefined(defaultValue) ||\n      (ref && (ref as HTMLInputElement).defaultChecked) ||\n      shouldSkipSetValueAs\n        ? set(\n            _formValues,\n            name,\n            shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f),\n          )\n        : setFieldValue(name, defaultValue);\n\n      _stateFlags.mount && _updateValid();\n    }\n  };\n\n  const updateTouchAndDirty = (\n    name: InternalFieldName,\n    fieldValue: unknown,\n    isBlurEvent?: boolean,\n    shouldDirty?: boolean,\n    shouldRender?: boolean,\n  ): Partial<\n    Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n  > => {\n    let isFieldDirty = false;\n    const output: Partial<FormState<TFieldValues>> & { name: string } = {\n      name,\n    };\n    const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n    if (_proxyFormState.isDirty) {\n      const isPreviousFormDirty = _formState.isDirty;\n\n      _formState.isDirty = output.isDirty = _getDirty();\n      isFieldDirty = isPreviousFormDirty !== output.isDirty;\n    }\n\n    if (_proxyFormState.dirtyFields && (!isBlurEvent || shouldDirty)) {\n      const isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      const isCurrentFieldPristine = deepEqual(\n        get(_defaultValues, name),\n        fieldValue,\n      );\n\n      isCurrentFieldPristine\n        ? unset(_formState.dirtyFields, name)\n        : set(_formState.dirtyFields, name, true);\n      output.dirtyFields = _formState.dirtyFields;\n      isFieldDirty =\n        isFieldDirty ||\n        isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n\n    if (isBlurEvent && !isPreviousFieldTouched) {\n      set(_formState.touchedFields, name, isBlurEvent);\n      output.touchedFields = _formState.touchedFields;\n      isFieldDirty =\n        isFieldDirty ||\n        (_proxyFormState.touchedFields &&\n          isPreviousFieldTouched !== isBlurEvent);\n    }\n\n    isFieldDirty && shouldRender && _subjects.state.next(output);\n\n    return isFieldDirty ? output : {};\n  };\n\n  const shouldRenderByError = async (\n    name: InternalFieldName,\n    isValid: boolean,\n    error?: FieldError,\n    fieldState?: {\n      dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    },\n  ): Promise<void> => {\n    const previousFieldError = get(_formState.errors, name);\n    const shouldUpdateValid =\n      _proxyFormState.isValid && _formState.isValid !== isValid;\n\n    if (props.delayError && error) {\n      delayErrorCallback = debounce(() => updateErrors(name, error));\n      delayErrorCallback(props.delayError);\n    } else {\n      clearTimeout(timer);\n      delayErrorCallback = null;\n      error\n        ? set(_formState.errors, name, error)\n        : unset(_formState.errors, name);\n    }\n\n    if (\n      (error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n      !isEmptyObject(fieldState) ||\n      shouldUpdateValid\n    ) {\n      const updatedFormState = {\n        ...fieldState,\n        ...(shouldUpdateValid ? { isValid } : {}),\n        errors: _formState.errors,\n        name,\n      };\n\n      _formState = {\n        ..._formState,\n        ...updatedFormState,\n      };\n\n      _subjects.state.next(updatedFormState);\n    }\n\n    validateFields[name]--;\n\n    if (\n      _proxyFormState.isValidating &&\n      !Object.values(validateFields).some((v) => v)\n    ) {\n      _subjects.state.next({\n        isValidating: false,\n      });\n      validateFields = {};\n    }\n  };\n\n  const _executeSchema = async (name?: InternalFieldName[]) =>\n    _options.resolver\n      ? await _options.resolver(\n          { ..._formValues } as TFieldValues,\n          _options.context,\n          getResolverOptions(\n            name || _names.mount,\n            _fields,\n            _options.criteriaMode,\n            _options.shouldUseNativeValidation,\n          ),\n        )\n      : ({} as ResolverResult<TFieldValues>);\n\n  const executeSchemaAndUpdateState = async (names?: InternalFieldName[]) => {\n    const { errors } = await _executeSchema();\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(_formState.errors, name, error)\n          : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors;\n    }\n\n    return errors;\n  };\n\n  const executeBuiltInValidation = async (\n    fields: FieldRefs,\n    shouldOnlyCheckValid?: boolean,\n    context = {\n      valid: true,\n    },\n  ) => {\n    for (const name in fields) {\n      const field = fields[name];\n\n      if (field) {\n        const { _f, ...fieldValue } = field;\n\n        if (_f) {\n          const isFieldArrayRoot = _names.array.has(_f.name);\n          const fieldError = await validateField(\n            field,\n            get(_formValues, _f.name),\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n            isFieldArrayRoot,\n          );\n\n          if (fieldError[_f.name]) {\n            context.valid = false;\n\n            if (shouldOnlyCheckValid) {\n              break;\n            }\n          }\n\n          !shouldOnlyCheckValid &&\n            (get(fieldError, _f.name)\n              ? isFieldArrayRoot\n                ? updateFieldArrayRootError(\n                    _formState.errors,\n                    fieldError,\n                    _f.name,\n                  )\n                : set(_formState.errors, _f.name, fieldError[_f.name])\n              : unset(_formState.errors, _f.name));\n        }\n\n        fieldValue &&\n          (await executeBuiltInValidation(\n            fieldValue,\n            shouldOnlyCheckValid,\n            context,\n          ));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const _removeUnmounted = () => {\n    for (const name of _names.unMount) {\n      const field: Field = get(_fields, name);\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every((ref) => !live(ref))\n          : !live(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  const _getDirty: GetIsDirty = (name, data) => (\n    name && data && set(_formValues, name, data),\n    !deepEqual(getValues(), _defaultValues)\n  );\n\n  const _getWatch: WatchInternal<TFieldValues> = (\n    names,\n    defaultValue,\n    isGlobal,\n  ) => {\n    const fieldValues = {\n      ...(_stateFlags.mount\n        ? _formValues\n        : isUndefined(defaultValue)\n        ? _defaultValues\n        : isString(names)\n        ? { [names]: defaultValue }\n        : defaultValue),\n    };\n\n    return generateWatchOutput(names, _names, fieldValues, isGlobal);\n  };\n\n  const _getFieldArray = <TFieldArrayValues>(\n    name: InternalFieldName,\n  ): Partial<TFieldArrayValues>[] =>\n    compact(\n      get(\n        _stateFlags.mount ? _formValues : _defaultValues,\n        name,\n        props.shouldUnregister ? get(_defaultValues, name, []) : [],\n      ),\n    );\n\n  const setFieldValue = (\n    name: InternalFieldName,\n    value: SetFieldValue<TFieldValues>,\n    options: SetValueConfig = {},\n  ) => {\n    const field: Field = get(_fields, name);\n    let fieldValue: unknown = value;\n\n    if (field) {\n      const fieldReference = field._f;\n\n      if (fieldReference) {\n        !fieldReference.disabled &&\n          set(_formValues, name, getFieldValueAs(value, fieldReference));\n\n        fieldValue =\n          isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n            ? ''\n            : value;\n\n        if (isMultipleSelect(fieldReference.ref)) {\n          [...fieldReference.ref.options].forEach(\n            (optionRef) =>\n              (optionRef.selected = (\n                fieldValue as InternalFieldName[]\n              ).includes(optionRef.value)),\n          );\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1\n              ? fieldReference.refs.forEach(\n                  (checkboxRef) =>\n                    (!checkboxRef.defaultChecked || !checkboxRef.disabled) &&\n                    (checkboxRef.checked = Array.isArray(fieldValue)\n                      ? !!(fieldValue as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : fieldValue === checkboxRef.value),\n                )\n              : fieldReference.refs[0] &&\n                (fieldReference.refs[0].checked = !!fieldValue);\n          } else {\n            fieldReference.refs.forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === fieldValue),\n            );\n          }\n        } else if (isFileInput(fieldReference.ref)) {\n          fieldReference.ref.value = '';\n        } else {\n          fieldReference.ref.value = fieldValue;\n\n          if (!fieldReference.ref.type) {\n            _subjects.watch.next({\n              name,\n            });\n          }\n        }\n      }\n    }\n\n    (options.shouldDirty || options.shouldTouch) &&\n      updateTouchAndDirty(\n        name,\n        fieldValue,\n        options.shouldTouch,\n        options.shouldDirty,\n        true,\n      );\n\n    options.shouldValidate && trigger(name as Path<TFieldValues>);\n  };\n\n  const setValues = <\n    T extends InternalFieldName,\n    K extends SetFieldValue<TFieldValues>,\n    U extends SetValueConfig,\n  >(\n    name: T,\n    value: K,\n    options: U,\n  ) => {\n    for (const fieldKey in value) {\n      const fieldValue = value[fieldKey];\n      const fieldName = `${name}.${fieldKey}` as Path<TFieldValues>;\n      const field = get(_fields, fieldName);\n\n      (_names.array.has(name) ||\n        !isPrimitive(fieldValue) ||\n        (field && !field._f)) &&\n      !isDateObject(fieldValue)\n        ? setValues(fieldName, fieldValue, options)\n        : setFieldValue(fieldName, fieldValue, options);\n    }\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n    const cloneValue = cloneObject(value);\n\n    set(_formValues, name, cloneValue);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues,\n      });\n\n      if (\n        (_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getDirty(name, cloneValue),\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(cloneValue)\n        ? setValues(name, cloneValue, options)\n        : setFieldValue(name, cloneValue, options);\n    }\n\n    isWatched(name, _names) && _subjects.state.next({});\n    _subjects.watch.next({\n      name,\n    });\n  };\n\n  const onChange: ChangeHandler = async (event) => {\n    const target = event.target;\n    let name = target.name;\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      let error;\n      let isValid;\n      const fieldValue = target.type\n        ? getFieldValue(field._f)\n        : getEventValue(event);\n      const isBlurEvent =\n        event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\n      const shouldSkipValidation =\n        (!hasValidation(field._f) &&\n          !_options.resolver &&\n          !get(_formState.errors, name) &&\n          !field._f.deps) ||\n        skipValidation(\n          isBlurEvent,\n          get(_formState.touchedFields, name),\n          _formState.isSubmitted,\n          validationModeAfterSubmit,\n          validationModeBeforeSubmit,\n        );\n      const watched = isWatched(name, _names, isBlurEvent);\n\n      set(_formValues, name, fieldValue);\n\n      if (isBlurEvent) {\n        field._f.onBlur && field._f.onBlur(event);\n        delayErrorCallback && delayErrorCallback(0);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n\n      const fieldState = updateTouchAndDirty(\n        name,\n        fieldValue,\n        isBlurEvent,\n        false,\n      );\n\n      const shouldRender = !isEmptyObject(fieldState) || watched;\n\n      !isBlurEvent &&\n        _subjects.watch.next({\n          name,\n          type: event.type,\n        });\n\n      if (shouldSkipValidation) {\n        return (\n          shouldRender &&\n          _subjects.state.next({ name, ...(watched ? {} : fieldState) })\n        );\n      }\n\n      !isBlurEvent && watched && _subjects.state.next({});\n\n      validateFields[name] = validateFields[name] ? +1 : 1;\n\n      _subjects.state.next({\n        isValidating: true,\n      });\n\n      if (_options.resolver) {\n        const { errors } = await _executeSchema([name]);\n        const previousErrorLookupResult = schemaErrorLookup(\n          _formState.errors,\n          _fields,\n          name,\n        );\n        const errorLookupResult = schemaErrorLookup(\n          errors,\n          _fields,\n          previousErrorLookupResult.name || name,\n        );\n\n        error = errorLookupResult.error;\n        name = errorLookupResult.name;\n\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (\n          await validateField(\n            field,\n            get(_formValues, name),\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          )\n        )[name];\n\n        isValid = await _updateValid(true);\n      }\n\n      field._f.deps &&\n        trigger(\n          field._f.deps as FieldPath<TFieldValues> | FieldPath<TFieldValues>[],\n        );\n\n      shouldRenderByError(name, isValid, error, fieldState);\n    }\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = async (name, options = {}) => {\n    let isValid;\n    let validationResult;\n    const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n\n    _subjects.state.next({\n      isValidating: true,\n    });\n\n    if (_options.resolver) {\n      const errors = await executeSchemaAndUpdateState(\n        isUndefined(name) ? name : fieldNames,\n      );\n\n      isValid = isEmptyObject(errors);\n      validationResult = name\n        ? !fieldNames.some((name) => get(errors, name))\n        : isValid;\n    } else if (name) {\n      validationResult = (\n        await Promise.all(\n          fieldNames.map(async (fieldName) => {\n            const field = get(_fields, fieldName);\n            return await executeBuiltInValidation(\n              field && field._f ? { [fieldName]: field } : field,\n            );\n          }),\n        )\n      ).every(Boolean);\n      !(!validationResult && !_formState.isValid) && _updateValid();\n    } else {\n      validationResult = isValid = await executeBuiltInValidation(_fields);\n    }\n\n    _subjects.state.next({\n      ...(!isString(name) ||\n      (_proxyFormState.isValid && isValid !== _formState.isValid)\n        ? {}\n        : { name }),\n      ...(_options.resolver || !name ? { isValid } : {}),\n      errors: _formState.errors,\n      isValidating: false,\n    });\n\n    options.shouldFocus &&\n      !validationResult &&\n      focusFieldBy(\n        _fields,\n        (key) => key && get(_formState.errors, key),\n        name ? fieldNames : _names.mount,\n      );\n\n    return validationResult;\n  };\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ..._defaultValues,\n      ...(_stateFlags.mount ? _formValues : {}),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const getFieldState: UseFormGetFieldState<TFieldValues> = (\n    name,\n    formState,\n  ) => ({\n    invalid: !!get((formState || _formState).errors, name),\n    isDirty: !!get((formState || _formState).dirtyFields, name),\n    isTouched: !!get((formState || _formState).touchedFields, name),\n    error: get((formState || _formState).errors, name),\n  });\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(_formState.errors, inputName),\n        )\n      : (_formState.errors = {});\n\n    _subjects.state.next({\n      errors: _formState.errors,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = ((get(_fields, name, { _f: {} }) as Field)._f || {}).ref;\n\n    set(_formState.errors, name, {\n      ...error,\n      ref,\n    });\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch: UseFormWatch<TFieldValues> = (\n    name?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(name)\n      ? _subjects.watch.subscribe({\n          next: (info) =>\n            name(\n              _getWatch(undefined, defaultValue as DeepPartial<TFieldValues>),\n              info as {\n                name?: FieldPath<TFieldValues>;\n                type?: EventType;\n                value?: unknown;\n              },\n            ),\n        })\n      : _getWatch(\n          name as InternalFieldName | InternalFieldName[],\n          defaultValue as DeepPartial<TFieldValues>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(fieldName);\n      _names.array.delete(fieldName);\n\n      if (get(_fields, fieldName)) {\n        if (!options.keepValue) {\n          unset(_fields, fieldName);\n          unset(_formValues, fieldName);\n        }\n\n        !options.keepError && unset(_formState.errors, fieldName);\n        !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n        !options.keepTouched && unset(_formState.touchedFields, fieldName);\n        !_options.shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(_defaultValues, fieldName);\n      }\n    }\n\n    _subjects.watch.next({});\n\n    _subjects.state.next({\n      ..._formState,\n      ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n    });\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  const register: UseFormRegister<TFieldValues> = (name, options = {}) => {\n    let field = get(_fields, name);\n    const disabledIsDefined = isBoolean(options.disabled);\n\n    set(_fields, name, {\n      ...(field || {}),\n      _f: {\n        ...(field && field._f ? field._f : { ref: { name } }),\n        name,\n        mount: true,\n        ...options,\n      },\n    });\n    _names.mount.add(name);\n\n    field\n      ? disabledIsDefined &&\n        set(\n          _formValues,\n          name,\n          options.disabled\n            ? undefined\n            : get(_formValues, name, getFieldValue(field._f)),\n        )\n      : updateValidAndValue(name, true, options.value);\n\n    return {\n      ...(disabledIsDefined ? { disabled: options.disabled } : {}),\n      ...(_options.shouldUseNativeValidation\n        ? {\n            required: !!options.required,\n            min: getRuleValue(options.min),\n            max: getRuleValue(options.max),\n            minLength: getRuleValue<number>(options.minLength) as number,\n            maxLength: getRuleValue(options.maxLength) as number,\n            pattern: getRuleValue(options.pattern) as string,\n          }\n        : {}),\n      name,\n      onChange,\n      onBlur: onChange,\n      ref: (ref: HTMLInputElement | null): void => {\n        if (ref) {\n          register(name, options);\n          field = get(_fields, name);\n\n          const fieldRef = isUndefined(ref.value)\n            ? ref.querySelectorAll\n              ? (ref.querySelectorAll('input,select,textarea')[0] as Ref) || ref\n              : ref\n            : ref;\n          const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\n          const refs = field._f.refs || [];\n\n          if (\n            radioOrCheckbox\n              ? refs.find((option: Ref) => option === fieldRef)\n              : fieldRef === field._f.ref\n          ) {\n            return;\n          }\n\n          set(_fields, name, {\n            _f: {\n              ...field._f,\n              ...(radioOrCheckbox\n                ? {\n                    refs: [\n                      ...refs.filter(live),\n                      fieldRef,\n                      ...(!!Array.isArray(get(_defaultValues, name))\n                        ? [{}]\n                        : []),\n                    ],\n                    ref: { type: fieldRef.type, name },\n                  }\n                : { ref: fieldRef }),\n            },\n          });\n\n          updateValidAndValue(name, false, undefined, fieldRef);\n        } else {\n          field = get(_fields, name, {});\n\n          if (field._f) {\n            field._f.mount = false;\n          }\n\n          (_options.shouldUnregister || options.shouldUnregister) &&\n            !(isNameInFieldArray(_names.array, name) && _stateFlags.action) &&\n            _names.unMount.add(name);\n        }\n      },\n    };\n  };\n\n  const _focusError = () =>\n    _options.shouldFocusError &&\n    focusFieldBy(\n      _fields,\n      (key) => key && get(_formState.errors, key),\n      _names.mount,\n    );\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> =\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues: any = cloneObject(_formValues);\n\n      _subjects.state.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (_options.resolver) {\n          const { errors, values } = await _executeSchema();\n          _formState.errors = errors;\n          fieldValues = values;\n        } else {\n          await executeBuiltInValidation(_fields);\n        }\n\n        if (isEmptyObject(_formState.errors)) {\n          _subjects.state.next({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          if (onInvalid) {\n            await onInvalid({ ..._formState.errors }, e);\n          }\n\n          _focusError();\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        _formState.isSubmitted = true;\n        _subjects.state.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(_formState.errors) && hasNoPromiseError,\n          submitCount: _formState.submitCount + 1,\n          errors: _formState.errors,\n        });\n      }\n    };\n\n  const resetField: UseFormResetField<TFieldValues> = (name, options = {}) => {\n    if (get(_fields, name)) {\n      if (isUndefined(options.defaultValue)) {\n        setValue(name, get(_defaultValues, name));\n      } else {\n        setValue(name, options.defaultValue);\n        set(_defaultValues, name, options.defaultValue);\n      }\n\n      if (!options.keepTouched) {\n        unset(_formState.touchedFields, name);\n      }\n\n      if (!options.keepDirty) {\n        unset(_formState.dirtyFields, name);\n        _formState.isDirty = options.defaultValue\n          ? _getDirty(name, get(_defaultValues, name))\n          : _getDirty();\n      }\n\n      if (!options.keepError) {\n        unset(_formState.errors, name);\n        _proxyFormState.isValid && _updateValid();\n      }\n\n      _subjects.state.next({ ..._formState });\n    }\n  };\n\n  const _reset: UseFormReset<TFieldValues> = (\n    formValues,\n    keepStateOptions = {},\n  ) => {\n    const updatedValues = formValues || _defaultValues;\n    const cloneUpdatedValues = cloneObject(updatedValues);\n    const values =\n      formValues && !isEmptyObject(formValues)\n        ? cloneUpdatedValues\n        : _defaultValues;\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n\n    if (!keepStateOptions.keepValues) {\n      if (keepStateOptions.keepDirtyValues) {\n        for (const fieldName of _names.mount) {\n          get(_formState.dirtyFields, fieldName)\n            ? set(values, fieldName, get(_formValues, fieldName))\n            : setValue(\n                fieldName as FieldPath<TFieldValues>,\n                get(values, fieldName),\n              );\n        }\n      } else {\n        if (isWeb && isUndefined(formValues)) {\n          for (const name of _names.mount) {\n            const field = get(_fields, name);\n            if (field && field._f) {\n              const fieldReference = Array.isArray(field._f.refs)\n                ? field._f.refs[0]\n                : field._f.ref;\n\n              try {\n                if (isHTMLElement(fieldReference)) {\n                  fieldReference.closest('form')!.reset();\n                  break;\n                }\n              } catch {}\n            }\n          }\n        }\n\n        _fields = {};\n      }\n\n      _formValues = props.shouldUnregister\n        ? keepStateOptions.keepDefaultValues\n          ? cloneObject(_defaultValues)\n          : {}\n        : cloneUpdatedValues;\n\n      _subjects.array.next({\n        values,\n      });\n\n      _subjects.watch.next({\n        values,\n      });\n    }\n\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: '',\n    };\n\n    _stateFlags.mount =\n      !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n\n    _stateFlags.watch = !!props.shouldUnregister;\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? _formState.submitCount\n        : 0,\n      isDirty:\n        keepStateOptions.keepDirty || keepStateOptions.keepDirtyValues\n          ? _formState.isDirty\n          : !!(\n              keepStateOptions.keepDefaultValues &&\n              !deepEqual(formValues, _defaultValues)\n            ),\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? _formState.isSubmitted\n        : false,\n      dirtyFields:\n        keepStateOptions.keepDirty || keepStateOptions.keepDirtyValues\n          ? _formState.dirtyFields\n          : keepStateOptions.keepDefaultValues && formValues\n          ? getDirtyFields(_defaultValues, formValues)\n          : {},\n      touchedFields: keepStateOptions.keepTouched\n        ? _formState.touchedFields\n        : {},\n      errors: keepStateOptions.keepErrors ? _formState.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n  };\n\n  const reset: UseFormReset<TFieldValues> = (formValues, keepStateOptions) =>\n    _reset(\n      isFunction(formValues)\n        ? formValues(_formValues as TFieldValues)\n        : formValues,\n      keepStateOptions,\n    );\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name, options = {}) => {\n    const field = get(_fields, name);\n    const fieldReference = field && field._f;\n\n    if (fieldReference) {\n      const fieldRef = fieldReference.refs\n        ? fieldReference.refs[0]\n        : fieldReference.ref;\n\n      if (fieldRef.focus) {\n        fieldRef.focus();\n        options.shouldSelect && fieldRef.select();\n      }\n    }\n  };\n\n  return {\n    control: {\n      register,\n      unregister,\n      getFieldState,\n      _executeSchema,\n      _focusError,\n      _getWatch,\n      _getDirty,\n      _updateValid,\n      _removeUnmounted,\n      _updateFieldArray,\n      _getFieldArray,\n      _subjects,\n      _proxyFormState,\n      get _fields() {\n        return _fields;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      get _stateFlags() {\n        return _stateFlags;\n      },\n      set _stateFlags(value) {\n        _stateFlags = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      get _options() {\n        return _options;\n      },\n      set _options(value) {\n        _options = {\n          ..._options,\n          ...value,\n        };\n      },\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    resetField,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus,\n    getFieldState,\n  };\n}\n","import React from 'react';\n\nimport { createFormControl } from './logic/createFormControl';\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport { FieldValues, FormState, UseFormProps, UseFormReturn } from './types';\nimport { useSubscribe } from './useSubscribe';\n\n/**\n * Custom hook to manage the entire form.\n *\n * @remarks\n * [API](https://react-hook-form.com/api/useform) • [Demo](https://codesandbox.io/s/react-hook-form-get-started-ts-5ksmm) • [Video](https://www.youtube.com/watch?v=RkXv4AXXC_4)\n *\n * @param props - form configuration and validation parameters.\n *\n * @returns methods - individual functions to manage the form state. {@link UseFormReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, watch, formState: { errors } } = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   console.log(watch(\"example\"));\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input defaultValue=\"test\" {...register(\"example\")} />\n *       <input {...register(\"exampleRequired\", { required: true })} />\n *       {errors.exampleRequired && <span>This field is required</span>}\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext = any,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): UseFormReturn<TFieldValues, TContext> {\n  const _formControl = React.useRef<\n    UseFormReturn<TFieldValues, TContext> | undefined\n  >();\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    isSubmitted: false,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    submitCount: 0,\n    dirtyFields: {},\n    touchedFields: {},\n    errors: {},\n    defaultValues: props.defaultValues,\n  });\n\n  if (!_formControl.current) {\n    _formControl.current = {\n      ...createFormControl(props),\n      formState,\n    };\n  }\n\n  const control = _formControl.current.control;\n  control._options = props;\n\n  useSubscribe({\n    subject: control._subjects.state,\n    callback: React.useCallback(\n      (value: FieldValues) => {\n        if (shouldRenderFormState(value, control._proxyFormState, true)) {\n          control._formState = {\n            ...control._formState,\n            ...value,\n          };\n\n          updateFormState({ ...control._formState });\n        }\n      },\n      [control],\n    ),\n  });\n\n  React.useEffect(() => {\n    if (!control._stateFlags.mount) {\n      control._proxyFormState.isValid && control._updateValid();\n      control._stateFlags.mount = true;\n    }\n\n    if (control._stateFlags.watch) {\n      control._stateFlags.watch = false;\n      control._subjects.state.next({});\n    }\n\n    control._removeUnmounted();\n  });\n\n  React.useEffect(() => {\n    formState.submitCount && control._focusError();\n  }, [control, formState.submitCount]);\n\n  _formControl.current.formState = getProxyFormState(formState, control);\n\n  return _formControl.current;\n}\n"],"names":["cssUnit","cm","mm","in","px","pt","pc","em","ex","ch","rem","vw","vh","vmin","vmax","parseLengthAndUnit","size","value","unit","valueString","match","toString","includes","parseFloat","parseInt","console","warn","concat","cssValue","lengthWithunit","__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","circle","loaderName","frames","suffix","animationName","window","document","styleEl","createElement","head","appendChild","styleSheet","sheet","keyFrames","insertRule","createAnimation","_a","_b","loading","_c","color","_d","speedMultiplier","_e","cssOverride","_f","additionalprops","wrapper","display","position","width","height","style","borderTop","borderBottom","borderLeft","borderRight","borderRadius","transition","top","left","animationFillMode","animation","React","element","type","Date","isObjectType","isNullOrUndefined","Array","isArray","isDateObject","event","isObject","target","isCheckBoxInput","checked","names","name","has","substring","search","getNodeParentName","filter","Boolean","val","undefined","obj","path","defaultValue","result","compact","split","reduce","key","isUndefined","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","formState","control","localProxyFormState","isRoot","defaultValues","_defaultValues","defineProperty","get","_key","_proxyFormState","keys","formStateData","isEmptyObject","find","useSubscribe","props","_props","current","subscription","disabled","subject","subscribe","next","callback","unsubscribe","_names","formValues","isGlobal","isString","watch","add","map","fieldName","watchAll","data","isFunction","validateAllFieldCriteria","errors","message","types","test","input","replace","set","object","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","fieldsNames","field","currentField","ref","focus","refs","isBlurEvent","some","watchName","startsWith","slice","error","fieldArrayErrors","RegExp","defaultResult","isValid","validResult","options","values","option","attributes","defaultReturn","previous","getValidateError","isMessage","every","isBoolean","validationData","isRegex","inputValue","shouldUseNativeValidation","isFieldArray","required","maxLength","minLength","min","max","pattern","validate","valueAsNumber","mount","inputRef","setCustomValidity","reportValidity","isRadio","isRadioInput","isCheckBox","isRadioOrCheckbox","isEmpty","isFileInput","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getCheckboxValue","getRadioValue","getValueAndMessage","maxOutput","minOutput","valueDate","valueAsDate","convertTimeToDate","time","toDateString","isTime","isWeek","exceedMin","valueNumber","maxLengthOutput","minLengthOutput","patternValue","validateError","validationResult","validateField","HTMLElement","cloneObject","copy","Set","isWeb","Blob","FileList","tempObject","prototypeCopy","constructor","isPlainObject","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","isEmptyArray","unset","previousObjRef","updatePath","childObject","baseGet","k","objectRef","currentPaths","currentPathsLength","item","createSubject","_observers","observers","observer","push","o","deepEqual","object1","object2","isPrimitive","getTime","keys1","keys2","val1","val2","owner","ownerDocument","defaultView","isHTMLElement","isConnected","markFieldsDirty","isParentNodeArray","objectHasFunction","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","setValueAs","NaN","getFieldValue","files","isMultipleSelect","selectedOptions","getFieldValueAs","_fields","criteriaMode","rule","source","schemaErrorLookup","join","foundError","pop","isTouched","isSubmitted","reValidateMode","defaultOptions","shouldFocusError","createFormControl","delayErrorCallback","_options","_formState","submitCount","isDirty","isValidating","isSubmitting","isSubmitSuccessful","touchedFields","dirtyFields","_formValues","shouldUnregister","_stateFlags","action","unMount","array","timer","validateFields","_subjects","state","validationModeBeforeSubmit","getValidationModes","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","debounce","wait","clearTimeout","setTimeout","_updateValid","shouldSkipRender","resolver","_executeSchema","executeBuiltInValidation","_updateFieldArray","method","args","shouldSetValues","shouldUpdateFieldsAndState","fieldValues","argA","argB","unsetEmptyArray","getDirtyFields","_getDirty","updateErrors","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","shouldDirty","shouldRender","isFieldDirty","output","isPreviousFieldTouched","isPreviousFormDirty","isPreviousFieldDirty","shouldRenderByError","fieldState","previousFieldError","shouldUpdateValid","delayError","updatedFormState","v","context","getResolverOptions","executeSchemaAndUpdateState","shouldOnlyCheckValid","valid","isFieldArrayRoot","fieldError","updateFieldArrayRootError","_removeUnmounted","live","unregister","getValues","_getWatch","generateWatchOutput","_getFieldArray","fieldReference","forEach","optionRef","selected","checkboxRef","radioRef","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","cloneValue","isWatched","onChange","getEventValue","shouldSkipValidation","hasValidation","deps","skipValidation","watched","onBlur","previousErrorLookupResult","errorLookupResult","fieldNames","convertToArrayPayload","Promise","all","shouldFocus","getFieldState","invalid","clearErrors","inputName","setError","info","delete","keepValue","keepError","keepDirty","keepTouched","keepDefaultValue","keepIsValid","register","disabledIsDefined","getRuleValue","fieldRef","querySelectorAll","radioOrCheckbox","isNameInFieldArray","_focusError","handleSubmit","onValid","onInvalid","preventDefault","persist","hasNoPromiseError","resetField","_reset","keepStateOptions","updatedValues","cloneUpdatedValues","keepDefaultValues","keepValues","keepDirtyValues","closest","reset","keepSubmitCount","keepIsSubmitted","keepErrors","setFocus","shouldSelect","select","useForm","_formControl","updateFormState","shouldRenderFormState","getProxyFormState"],"sourceRoot":""}